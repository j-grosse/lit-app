{"version":3,"file":"select-element.js","sourceRoot":"","sources":["src/select-element.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAGnD,IAAM,aAAa,GAAnB,MAAM,aAAc,SAAQ,UAAU;IAAtC;;QACqB,kBAAa,GAAG,EAAE,CAAC;QACnB,6BAAwB,GAAG,EAAE,CAAC;QAC9B,qBAAgB,GAAG,EAAE,CAAC;IAuGlD,CAAC;IAvEU,YAAY;QACnB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;QACrC,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;QAC5B,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,WAAW,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAC,CAAC,CAC9D,CAAC;IACJ,CAAC;IAED,kBAAkB,CAAC,KAAY;QAC7B,MAAM,aAAa,GAAG,KAAK,CAAC,MAA2B,CAAC;QACxD,IAAI,aAAa,CAAC,EAAE,KAAK,cAAc,EAAE,CAAC;YACxC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC;QAC3C,CAAC;aAAM,IAAI,aAAa,CAAC,EAAE,KAAK,qBAAqB,EAAE,CAAC;YACtD,IAAI,CAAC,wBAAwB,GAAG,aAAa,CAAC,KAAK,CAAC;QACtD,CAAC;aAAM,IAAI,aAAa,CAAC,EAAE,KAAK,kBAAkB,EAAE,CAAC;YACnD,IAAI,CAAC,gBAAgB,GAAG,aAAa,CAAC,KAAK,CAAC;YAC5C,yDAAyD;YACzD,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,mBAAmB,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAC,CAAC,CACtE,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC7B,CAAC;IAED,iCAAiC;IACjC,mBAAmB;QACjB,MAAM,OAAO,GAAG;YACd,KAAK,EAAE,IAAI,CAAC,aAAa;YACzB,WAAW,EAAE,IAAI,CAAC,wBAAwB;YAC1C,QAAQ,EAAE,IAAI,CAAC,gBAAgB;SAChC,CAAC;QAEF,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC,qBAAqB,CAAC,CAAC;QACpD,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;YACnB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC;IACJ,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;;6CAE8B,IAAI,CAAC,kBAAkB;;;;kCAIlC,IAAI,CAAC,aAAa;;oDAEA,IAAI,CAAC,kBAAkB;;;;;;;yCAOlC,IAAI,CAAC,wBAAwB;;iDAErB,IAAI,CAAC,kBAAkB;;;;;;;;0CAQ9B,IAAI,CAAC,gBAAgB;;KAE1D,CAAC;IACJ,CAAC;;AApGe,oBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4B3B,AA5BqB,CA4BpB;AAhCwB;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;oDAAoB;AACnB;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;+DAA+B;AAC9B;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;uDAAuB;AAHrC,aAAa;IADzB,aAAa,CAAC,gBAAgB,CAAC;GACnB,aAAa,CA0GzB","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement('select-element')\nexport class SelectElement extends LitElement {\n  @property({type: String}) selectedPower = '';\n  @property({type: String}) selectedDisplayModeValue = '';\n  @property({type: String}) selectedMaxValue = '';\n\n  static override styles = css`\n    .options {\n      display: flex;\n      flex-direction: column;\n      gap: 0.5rem;\n    }\n\n    select {\n      font-family: Open Sans, sans-serif;\n      padding: 8px;\n      font-size: 16px;\n      color: #8693a9;\n      border: solid 1px #E1E8F9;\n      border-radius: 2px;\n    }\n\n    select option {\n      background: #aaa;\n    }\n\n    option:not(:checked) {\n      background: #fff;\n    }\n\n    select option:checked {\n      background-color: #f0f0f0;\n      color: #aaa;\n    }\n  `;\n\n  override firstUpdated() {\n    this.selectedPower = 'ac';\n    this.selectedDisplayModeValue = 'av';\n    this.selectedMaxValue = '1';\n    this.sendSelectedOptions();\n    this.dispatchEvent(\n      new CustomEvent('max-value', {detail: this.selectedMaxValue})\n    );\n  }\n\n  handleSelectChange(event: Event) {\n    const selectElement = event.target as HTMLSelectElement;\n    if (selectElement.id === 'option-power') {\n      this.selectedPower = selectElement.value;\n    } else if (selectElement.id === 'option-display-mode') {\n      this.selectedDisplayModeValue = selectElement.value;\n    } else if (selectElement.id === 'option-max-value') {\n      this.selectedMaxValue = selectElement.value;\n      // Dispatch a custom event to notify the parent component\n      this.dispatchEvent(\n        new CustomEvent('max-value-changed', {detail: this.selectedMaxValue})\n      );\n    }\n\n    this.sendSelectedOptions();\n  }\n\n  // send changed options to server\n  sendSelectedOptions() {\n    const options = {\n      power: this.selectedPower,\n      displayMode: this.selectedDisplayModeValue,\n      maxValue: this.selectedMaxValue,\n    };\n\n    const socket = new WebSocket('ws://localhost:3000');\n    socket.onopen = () => {\n      socket.send(JSON.stringify(options));\n    };\n  }\n\n  override render() {\n    return html`\n      <div class=\"options\">\n        <select id=\"option-power\" @change=\"${this.handleSelectChange}\">\n          <option value=\"dc\" selected>DC</option>\n          <option value=\"ac\">AC</option>\n        </select>\n        <!-- <p>Selected power: ${this.selectedPower}</p> -->\n\n        <select id=\"option-display-mode\" @change=\"${this.handleSelectChange}\">\n          <option value=\"av\" selected>AV</option>\n          <option value=\"absAv\">|AV|</option>\n          <option value=\"p\">P</option>\n          <option value=\"pp\">PP</option>\n          <option value=\"rms\">RMS</option>\n        </select>\n        <!-- <p>Selected display mode: ${this.selectedDisplayModeValue}</p> -->\n\n        <select id=\"option-max-value\" @change=\"${this.handleSelectChange}\">\n          <option value=\"0.1\">100mV</option>\n          <option value=\"0.2\">200mV</option>\n          <option value=\"0.5\">500mV</option>\n          <option value=\"1\" selected>1V</option>\n          <option value=\"2\">2V</option>\n          <option value=\"10\">10V</option>\n        </select>\n        <!-- <p>Selected maximum value: ${this.selectedMaxValue}</p> -->\n      </div>\n    `;\n  }\n}\n"]}