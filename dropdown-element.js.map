{"version":3,"file":"dropdown-element.js","sourceRoot":"","sources":["src/dropdown-element.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAGnD,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,UAAU;IAAxC;;QACsB,qBAAgB,GAAG,KAAK,CAAC;QAC1B,uBAAkB,GAAG,EAAE,CAAC;QACxB,wBAAmB,GAAG,CAAC,CAAC;QACzB,YAAO,GAAa,EAAE,CAAC;QACvB,iBAAY,GAAa,EAAE,CAAC;QAsFrD,sCAAsC;QACtC,iCAAiC;QACjC,+BAA+B;QAC/B,uCAAuC;QACvC,4EAA4E;QAC5E,IAAI;QAEJ,oCAAoC;QACpC,kCAAkC;QAClC,+EAA+E;QAC/E,IAAI;QAEJ,uBAAkB,GAAG,CAAC,KAAY,EAAE,EAAE;YACpC,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;YACnC,IAAI,UAAU,EAAE,CAAC;gBACf,MAAM,QAAQ,GAAG,UAAU,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;gBAC5D,MAAM,MAAM,GAAG,KAAK,CAAC,MAAc,CAAC;gBACpC,IAAI,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;oBAC3C,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;gBAChC,CAAC;YACH,CAAC;QACH,CAAC,CAAC;IAwDJ,CAAC;IAhFQ,YAAY;QACnB,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACzE,CAAC;IAwBC,qBAAqB;IACrB,WAAW;QACT,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACjD,CAAC;IAED,iBAAiB,CAAC,IAAY,EAAE,MAAc;QAC5C,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;QAC7C,qBAAqB;QACrB,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC;QAClC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAE/B,iBAAiB;QACjB,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAE9B,0DAA0D;QAC1D,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,uBAAuB,EAAE;YACvC,MAAM,EAAE,IAAI,CAAC,mBAAmB;SACjC,CAAC,CACH,CAAC;QACF,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,sBAAsB,EAAE;YACtC,MAAM,EAAE,IAAI,CAAC,kBAAkB;SAChC,CAAC,CACH,CAAC;IACJ,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;6BACc,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;;2CAEvB,IAAI,CAAC,WAAW;cAC7C,IAAI,CAAC,kBAAkB;;;;;;;;cAQvB,IAAI,CAAC,OAAO,CAAC,GAAG,CAChB,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,CAAA;yBACV,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;yBACxB,GAAG,EAAE,CACZ,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;;kBAEtD,IAAI;oBACF,CACP;;;;KAIR,CAAC;IACJ,CAAC;;AAhKe,sBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+E3B,AA/EqB,CA+EpB;AArFyB;IAA1B,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;yDAA0B;AAC1B;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;2DAAyB;AACxB;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;4DAAyB;AACzB;IAAxB,QAAQ,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC;gDAAwB;AACvB;IAAxB,QAAQ,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC;qDAA6B;AAL1C,eAAe;IAD3B,aAAa,CAAC,kBAAkB,CAAC;GACrB,eAAe,CAwK3B","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement('dropdown-element')\nexport class DropdownElement extends LitElement {\n  @property({type: Boolean}) isDropdownActive = false;\n  @property({type: String}) selectedOptionText = '';\n  @property({type: Number}) selectedOptionValue = 0;\n  @property({type: Array}) options: string[] = [];\n  @property({type: Array}) optionValues: number[] = [];\n\n  static override styles = css`\n    /* button */\n    .dropbtn {\n      font-family: Open Sans, sans-serif;\n      background-color: #fff;\n      color: #8693a9;\n      font-size: 1rem;\n      border: solid 1px #e1e8f9;\n      border-radius: 2px;\n      padding: 8px 10px;\n      min-width: 160px;\n      text-align: left;\n      cursor: pointer;\n    }\n\n    .dropbtn svg {\n      position: absolute;\n      top: 50%;\n      right: 10px;\n      transform: translateY(-70%) rotate(0deg);\n      transition: transform 0.15s;\n      width: 16px;\n      height: 16px;\n      fill: #8693a9;\n    }\n\n    .dropdown.active .dropbtn svg {\n      transform: translateY(-30%) rotate(180deg);\n    }\n\n    /* dropdown content positioning */\n    .dropdown {\n      position: relative;\n      display: inline-block;\n    }\n\n    /* dropdown content */\n    .dropdown-content {\n      position: absolute;\n      top: 30px;\n      color: #8693a9;\n      background-color: #fff;\n      border: solid 1px #e1e8f9;\n      min-width: 160px;\n      padding: 8px 12px;\n      padding: 0;\n      z-index: 1;\n      cursor: pointer;\n      opacity: 0;\n      display: none;\n      transform: translateY(0px);\n      transition: opacity 0.2s ease;\n    }\n\n    /* change button color when the dropdown content is shown */\n    .dropdown.active .dropbtn {\n      color: #f09605;\n      border-color: #f09605;\n    }\n\n    .dropdown.active .dropdown-content {\n      display: block;\n      opacity: 1;\n      transform: translateY(0);\n    }\n\n    .dropdown-content li {\n      padding: 8px 10px;\n    }\n\n    /* Change color of dropdown links on hover */\n    .dropdown-content li:hover {\n      color: #fff;\n      background-color: #8693a9;\n    }\n\n    ul {\n      list-style-type: none;\n    }\n  `;\n\noverride firstUpdated() {\n  document.addEventListener('click', this.handleClickOutside.bind(this));\n}\n  // close menu on click outside of menu\n  // override connectedCallback() {\n  //   super.connectedCallback();\n  //   this.attachShadow({mode: 'open'});\n  //   document.addEventListener('click', this.handleClickOutside.bind(this));\n  // }\n\n  // override disconnectedCallback() {\n  //   super.disconnectedCallback();\n  //   document.removeEventListener('click', this.handleClickOutside.bind(this));\n  // }\n\n  handleClickOutside = (event: Event) => {\n    const shadowRoot = this.shadowRoot;\n    if (shadowRoot) {\n      const dropdown = shadowRoot.querySelector('.dropdown-menu');\n      const target = event.target as Node;\n      if (dropdown && !dropdown.contains(target)) {\n        this.isDropdownActive = false;\n      }\n    }\n  };\n\n  // open menu on click\n  handleClick() {\n    this.isDropdownActive = !this.isDropdownActive;\n  }\n\n  handleOptionClick(item: string, option: number) {\n    console.log('selected option value', option);\n    // update button text\n    this.selectedOptionValue = option;\n    this.selectedOptionText = item;\n\n    // close dropdown\n    this.isDropdownActive = false;\n\n    // pass selected option value and text to parent component\n    this.dispatchEvent(\n      new CustomEvent('selected-option-value', {\n        detail: this.selectedOptionValue,\n      })\n    );\n    this.dispatchEvent(\n      new CustomEvent('selected-option-text', {\n        detail: this.selectedOptionText,\n      })\n    );\n  }\n\n  override render() {\n    return html`\n      <div class=\"dropdown ${this.isDropdownActive ? 'active' : ''}\">\n        <div>\n          <button class=\"dropbtn\" @click=${this.handleClick}>\n            ${this.selectedOptionText}\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\">\n              <path\n                d=\"M182.6 470.6c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-9.2-9.2-11.9-22.9-6.9-34.9s16.6-19.8 29.6-19.8H288c12.9 0 24.6 7.8 29.6 19.8s2.2 25.7-6.9 34.9l-128 128z\"\n              />\n            </svg>\n          </button>\n          <ul id=\"dropdown-content\" class=\"dropdown-content\">\n            ${this.options.map(\n              (item, index) => html`<li\n                value=\"${this.optionValues[index]}\"\n                @click=${() =>\n                  this.handleOptionClick(item, this.optionValues[index])}\n              >\n                ${item}\n              </li>`\n            )}\n          </ul>\n        </div>\n      </div>\n    `;\n  }\n}\n"]}